diff a/apps/modeling-app/src/components/NewEvaluationForm/Sections/DatasetConfiguration/useDatasetValidation.ts b/apps/modeling-app/src/components/NewEvaluationForm/Sections/DatasetConfiguration/useDatasetValidation.ts	(rejected hunks)
@@ -7,30 +7,30 @@ import { EvaluationFormValues, CovariateMapping } from '../../hooks/useFormContr
 export const useDatasetValidation = () => {
   const queryClient = useQueryClient()
   const methods = useFormContext<EvaluationFormValues>()
-  
+
   const modelId = useWatch({ control: methods.control, name: 'modelId' })
   const covariateMappings = useWatch({ control: methods.control, name: 'covariateMappings' })
   const targetMapping = useWatch({ control: methods.control, name: 'targetMapping' })
 
   const getSelectedModel = (modelId: string): ModelSpecRead | undefined => {
     if (!modelId) return undefined
-    
+
     return queryClient.getQueryData<ModelSpecRead[]>(['models'])?.find((model) => model.id === Number(modelId))
   }
 
   const validateTargetMapping = (modelId: string, targetMapping?: CovariateMapping): string | null => {
     const model = getSelectedModel(modelId)
     if (!model || !model.target) return null
-    
+
     if (!targetMapping) {
-      return i18n.t('Target "{{targetName}}" must be mapped to a data item', { 
-        targetName: model.target.displayName || model.target.name 
+      return i18n.t('Target "{{targetName}}" must be mapped to a data item', {
+        targetName: model.target.displayName || model.target.name
       })
     }
 
-    if (targetMapping.covariateName !== model.target.name || !targetMapping.dataItemId) {
-      return i18n.t('Target "{{targetName}}" must be mapped to a data item', { 
-        targetName: model.target.displayName || model.target.name 
+    if (targetMapping.covariateName !== model.target.name || !targetMapping.dataItem.id) {
+      return i18n.t('Target "{{targetName}}" must be mapped to a data item', {
+        targetName: model.target.displayName || model.target.name
       })
     }
 
@@ -40,15 +40,15 @@ export const useDatasetValidation = () => {
   const validateCovariateMapping = (modelId: string, covariateMappings?: CovariateMapping[]): Record<string, string> => {
     const model = getSelectedModel(modelId)
     const errors: Record<string, string> = {}
-    
+
     if (!model || !model.covariates) return errors
 
     model.covariates.forEach((covariate) => {
       if (!covariate.name) return // Skip covariates without a name
-      
+
       const mapping = covariateMappings?.find(m => m.covariateName === covariate.name)
-      
-      if (!mapping || !mapping.dataItemId) {
+
+      if (!mapping || !mapping.dataItem.id) {
         errors[covariate.name] = i18n.t('Covariate "{{covariateName}}" must be mapped to a data item', {
           covariateName: covariate.displayName || covariate.name
         })
@@ -62,16 +62,16 @@ export const useDatasetValidation = () => {
     const model = getSelectedModel(modelId)
     if (!model) return { missingCovariates: [], missingTarget: false }
 
-    const missingCovariates = model.covariates?.filter(covariate => 
-      !covariateMappings?.some(mapping => 
-        mapping.covariateName === covariate.name && mapping.dataItemId
+    const missingCovariates = model.covariates?.filter(covariate =>
+      !covariateMappings?.some(mapping =>
+        mapping.covariateName === covariate.name && mapping.dataItem.id
       )
     ) || []
 
-    const missingTarget = !targetMapping || 
+    const missingTarget = !targetMapping ||
       !model.target ||
-      targetMapping.covariateName !== model.target.name || 
-      !targetMapping.dataItemId
+      targetMapping.covariateName !== model.target.name ||
+      !targetMapping.dataItem.id
 
     return { missingCovariates, missingTarget }
   }
@@ -101,8 +101,8 @@ export const useDatasetValidation = () => {
     }
 
     const { missingCovariates, missingTarget } = getMissingMappings(
-      modelId, 
-      covariateMappings, 
+      modelId,
+      covariateMappings,
       targetMapping
     )
 
